import { DataTypes, Model, Sequelize } from 'sequelize'
import { omit } from '../utils'

interface AutoGeneratedAttrs {
  id: number
  createdAt: Date
  updatedAt: Date
}

export interface UserAttrs extends AutoGeneratedAttrs {
  username: string
  password: string
}
export type UserAttrsOnlyDefine = Omit<UserAttrs, keyof AutoGeneratedAttrs>
export type UserCreateAttrs = UserAttrsOnlyDefine

interface UserModel extends Model<UserAttrs, UserCreateAttrs>, UserAttrs {}

export function defineUserModel(sequelize: Sequelize) {
  return class User extends sequelize.define<UserModel, UserAttrsOnlyDefine>(
    'User',
    {
      username: {
        type: DataTypes.STRING,
        unique: true,
      },
      password: DataTypes.STRING,
    }
  ) {
    // Class association methods
    // public addClass!: BelongsToManyAddAssociationMixin<Class, number>
    // public addClasses!: BelongsToManyAddAssociationsMixin<Class, number>
    // public countClasses!: BelongsToManyCountAssociationsMixin
    // public createClass!: BelongsToManyCreateAssociationMixin<Class>
    // public getClasses!: BelongsToManyGetAssociationsMixin<Class>
    // public hasClass!: BelongsToManyHasAssociationMixin<Class, number>
    // public hasClasses!: BelongsToManyHasAssociationsMixin<Class, number>
    // public removeClass!: BelongsToManyRemoveAssociationMixin<Class, number>
    // public removeClasses!: BelongsToManyRemoveAssociationsMixin<Class, number>
    // public setClasses!: BelongsToManySetAssociationsMixin<Class, number>
    // Populated for inclusions
    // public readonly Classes?: Class[]
    // public static associations: {
    //     Classes: Association<Student, Class>
    // }

    toClient() {
      return omit(this.toJSON(), 'password')
    }
  }
}
